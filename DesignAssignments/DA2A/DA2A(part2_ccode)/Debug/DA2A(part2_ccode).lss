
DA2A(part2_ccode).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068e  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  0000082a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021a  00000000  00000000  00000e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000103c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000358  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <stdio.h>

int main(void)
{
	DDRB = (1<<2); //PB2 as an output
  80:	84 e0       	ldi	r24, 0x04	; 4
  82:	84 b9       	out	0x04, r24	; 4
	PORTB = (1<<2); //Sets PB2
  84:	85 b9       	out	0x05, r24	; 5
	DDRC = (0<<2); //PC2 as an input
  86:	17 b8       	out	0x07, r1	; 7
	PORTC = (0<<2); //Sets PC2
  88:	18 b8       	out	0x08, r1	; 8
	TCCR1B = 5; //Sets prescaler to 1024
  8a:	85 e0       	ldi	r24, 0x05	; 5
  8c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
			TCNT1 = 0; //Reset counter
		}
		else //else, if the pushbutton is not pressed, go through this else statement
		{
			PORTB |= (1<<2); //Keeps LED off until otherwise
			TCNT1 = 0; //Reset counter
  90:	e4 e8       	ldi	r30, 0x84	; 132
  92:	f0 e0       	ldi	r31, 0x00	; 0
	DDRC = (0<<2); //PC2 as an input
	PORTC = (0<<2); //Sets PC2
	TCCR1B = 5; //Sets prescaler to 1024
	while (1) //loop forever to keep program running
	{
		if (!(PINC & (1 << PINC2))) //If the pushbutton is pressed, go through this if statement
  94:	32 99       	sbic	0x06, 2	; 6
  96:	09 c0       	rjmp	.+18     	; 0xaa <main+0x2a>
		{
			PORTB &= ~(1<<2); //Keeps LED on until otherwise
  98:	2a 98       	cbi	0x05, 2	; 5
			while (TCNT1 != 19530){} //Delay to keep LED off
  9a:	80 81       	ld	r24, Z
  9c:	91 81       	ldd	r25, Z+1	; 0x01
  9e:	8a 34       	cpi	r24, 0x4A	; 74
  a0:	9c 44       	sbci	r25, 0x4C	; 76
  a2:	d9 f7       	brne	.-10     	; 0x9a <main+0x1a>
			TCNT1 = 0; //Reset counter
  a4:	11 82       	std	Z+1, r1	; 0x01
  a6:	10 82       	st	Z, r1
  a8:	f5 cf       	rjmp	.-22     	; 0x94 <main+0x14>
		}
		else //else, if the pushbutton is not pressed, go through this else statement
		{
			PORTB |= (1<<2); //Keeps LED off until otherwise
  aa:	2a 9a       	sbi	0x05, 2	; 5
			TCNT1 = 0; //Reset counter
  ac:	11 82       	std	Z+1, r1	; 0x01
  ae:	10 82       	st	Z, r1
  b0:	f1 cf       	rjmp	.-30     	; 0x94 <main+0x14>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
