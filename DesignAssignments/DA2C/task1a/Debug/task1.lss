
task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000691  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  00000841  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000230  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001078  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033b  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  000013d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001443  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <stdio.h>

int main(void)
{
	DDRB |= (1<<5) | (1<<2); //Sets PB5/PB2 as outputs
  80:	84 b1       	in	r24, 0x04	; 4
  82:	84 62       	ori	r24, 0x24	; 36
  84:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<5) | (1<<2); //Clears PB5/PB2
  86:	85 b1       	in	r24, 0x05	; 5
  88:	84 62       	ori	r24, 0x24	; 36
  8a:	85 b9       	out	0x05, r24	; 5
	TCCR0B = 5; //Set prescaler to 1024
  8c:	85 e0       	ldi	r24, 0x05	; 5
  8e:	85 bd       	out	0x25, r24	; 37
			{
			while(TCNT0 != 137){}
			TCNT0 = 0;
			x++;
			} //Delay to keep LED off
		PORTB ^= (1<<2); //LED turns on
  90:	94 e0       	ldi	r25, 0x04	; 4
	TCCR0B = 5; //Set prescaler to 1024
	int x=0;
	
	while(1) //infinite loop to keep the LED's to blink
	{
		TCNT0 = 0; //Reset counter
  92:	16 bc       	out	0x26, r1	; 38
  94:	21 e2       	ldi	r18, 0x21	; 33
  96:	30 e0       	ldi	r19, 0x00	; 0
		x = 0;
		while (x <= 32) //TCNT to 4530
			{
			while(TCNT0 != 137){}
  98:	86 b5       	in	r24, 0x26	; 38
  9a:	89 38       	cpi	r24, 0x89	; 137
  9c:	e9 f7       	brne	.-6      	; 0x98 <main+0x18>
			TCNT0 = 0;
  9e:	16 bc       	out	0x26, r1	; 38
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	31 09       	sbc	r19, r1
	
	while(1) //infinite loop to keep the LED's to blink
	{
		TCNT0 = 0; //Reset counter
		x = 0;
		while (x <= 32) //TCNT to 4530
  a4:	c9 f7       	brne	.-14     	; 0x98 <main+0x18>
			{
			while(TCNT0 != 137){}
			TCNT0 = 0;
			x++;
			} //Delay to keep LED off
		PORTB ^= (1<<2); //LED turns on
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	89 27       	eor	r24, r25
  aa:	85 b9       	out	0x05, r24	; 5
		TCNT0 = 0; //Reset counter
  ac:	16 bc       	out	0x26, r1	; 38
  ae:	21 e2       	ldi	r18, 0x21	; 33
  b0:	30 e0       	ldi	r19, 0x00	; 0
		x = 0;
		while (x <= 32) //TCNT to 6796
			{
			while(TCNT0 != 206){}
  b2:	86 b5       	in	r24, 0x26	; 38
  b4:	8e 3c       	cpi	r24, 0xCE	; 206
  b6:	e9 f7       	brne	.-6      	; 0xb2 <main+0x32>
			TCNT0 = 0;
  b8:	16 bc       	out	0x26, r1	; 38
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	31 09       	sbc	r19, r1
			x++;
			} //Delay to keep LED off
		PORTB ^= (1<<2); //LED turns on
		TCNT0 = 0; //Reset counter
		x = 0;
		while (x <= 32) //TCNT to 6796
  be:	c9 f7       	brne	.-14     	; 0xb2 <main+0x32>
			{
			while(TCNT0 != 206){}
			TCNT0 = 0;
			x++;
			} //Delay to keep LED on
		PORTB ^= (1<<2); //LED turns off
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	89 27       	eor	r24, r25
  c4:	85 b9       	out	0x05, r24	; 5
	}
  c6:	e5 cf       	rjmp	.-54     	; 0x92 <main+0x12>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
