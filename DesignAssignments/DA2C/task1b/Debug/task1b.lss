
task1b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000691  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  00000835  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022a  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033c  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <stdio.h>

int main(void)
{
	DDRB |= (1<<5) | (1<<2); //Sets PB5/PB2 as outputs
  80:	84 b1       	in	r24, 0x04	; 4
  82:	84 62       	ori	r24, 0x24	; 36
  84:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<5) | (1<<2); //Clears PB5/PB2
  86:	85 b1       	in	r24, 0x05	; 5
  88:	84 62       	ori	r24, 0x24	; 36
  8a:	85 b9       	out	0x05, r24	; 5
	DDRC = (0<<2); //PC2 as an input
  8c:	17 b8       	out	0x07, r1	; 7
	PORTC = (0<<2); //Sets PC2
  8e:	18 b8       	out	0x08, r1	; 8
	TCCR0B = 5; //Sets prescaler to 1024
  90:	85 e0       	ldi	r24, 0x05	; 5
  92:	85 bd       	out	0x25, r24	; 37
	int x = 0;
	while (1) //loop forever to keep program running
	{
		if (!(PINC & (1 << PINC2))) //If the pushbutton is pressed, go through this if statement
  94:	32 99       	sbic	0x06, 2	; 6
  96:	0f c0       	rjmp	.+30     	; 0xb6 <main+0x36>
		{
			PORTB &= ~(1<<2); //Keeps LED on until otherwise
  98:	2a 98       	cbi	0x05, 2	; 5
  9a:	2d e4       	ldi	r18, 0x4D	; 77
  9c:	30 e0       	ldi	r19, 0x00	; 0
			while (x <= 76/*TCNT0 != 19530*/) //Delay to keep LED on
			{
				while (TCNT0 != 253);
  9e:	86 b5       	in	r24, 0x26	; 38
  a0:	8d 3f       	cpi	r24, 0xFD	; 253
  a2:	e9 f7       	brne	.-6      	; 0x9e <main+0x1e>
				TCNT0 = 0;
  a4:	16 bc       	out	0x26, r1	; 38
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	31 09       	sbc	r19, r1
	while (1) //loop forever to keep program running
	{
		if (!(PINC & (1 << PINC2))) //If the pushbutton is pressed, go through this if statement
		{
			PORTB &= ~(1<<2); //Keeps LED on until otherwise
			while (x <= 76/*TCNT0 != 19530*/) //Delay to keep LED on
  aa:	c9 f7       	brne	.-14     	; 0x9e <main+0x1e>
			{
				while (TCNT0 != 253);
				TCNT0 = 0;
				x++;
			}
			while(TCNT0 != 51);
  ac:	86 b5       	in	r24, 0x26	; 38
  ae:	83 33       	cpi	r24, 0x33	; 51
  b0:	e9 f7       	brne	.-6      	; 0xac <main+0x2c>
			TCNT0 = 0; //Reset counter
  b2:	16 bc       	out	0x26, r1	; 38
  b4:	ef cf       	rjmp	.-34     	; 0x94 <main+0x14>
			x = 0;
		}
		else //else, if the pushbutton is not pressed, go through this else statement
		{
			PORTB |= (1<<2); //Keeps LED off until otherwise
  b6:	2a 9a       	sbi	0x05, 2	; 5
			TCNT0 = 0; //Reset counter
  b8:	16 bc       	out	0x26, r1	; 38
  ba:	ec cf       	rjmp	.-40     	; 0x94 <main+0x14>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
