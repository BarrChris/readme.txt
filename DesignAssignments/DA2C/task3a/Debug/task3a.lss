
task3a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a7  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061f  00000000  00000000  00000893  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000252  00000000  00000000  00000eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001104  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000349  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c3  00000000  00000000  000014a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__vector_14>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <stdio.h>

int main(void)
{
	DDRB |= (1<<5) | (1<<2); //Sets PB5/PB2 as outputs
  80:	84 b1       	in	r24, 0x04	; 4
  82:	84 62       	ori	r24, 0x24	; 36
  84:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<5) | (1<<2); //Clears PB5/PB2
  86:	85 b1       	in	r24, 0x05	; 5
  88:	84 62       	ori	r24, 0x24	; 36
  8a:	85 b9       	out	0x05, r24	; 5
	TCCR0B = 5; //Set prescaler to 1024
  8c:	85 e0       	ldi	r24, 0x05	; 5
  8e:	85 bd       	out	0x25, r24	; 37
	TCCR0A = (1 << WGM01); //Set CTC Mode
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = (1 << OCIE0A); //Set interrupt on compare match 
  94:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	sei(); 
  98:	78 94       	sei
	OCR0A = 0xFF;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	87 bd       	out	0x27, r24	; 39
  9e:	ff cf       	rjmp	.-2      	; 0x9e <main+0x1e>

000000a0 <__vector_14>:
	
	return 0;
}

ISR (TIMER0_COMPA_vect)
{
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	2f 93       	push	r18
  ac:	3f 93       	push	r19
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
	int x = 0;
	TCNT0 = 0; //Reset counter
  b2:	16 bc       	out	0x26, r1	; 38
  b4:	21 e2       	ldi	r18, 0x21	; 33
  b6:	30 e0       	ldi	r19, 0x00	; 0
	x = 0;
	while (x <= 32) //TCNT to 4530
	{
		while(TCNT0 != 137){} // Delay for 0.29 seconds
  b8:	86 b5       	in	r24, 0x26	; 38
  ba:	89 38       	cpi	r24, 0x89	; 137
  bc:	e9 f7       	brne	.-6      	; 0xb8 <__vector_14+0x18>
		TCNT0 = 0; // Reset Counter
  be:	16 bc       	out	0x26, r1	; 38
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	31 09       	sbc	r19, r1
ISR (TIMER0_COMPA_vect)
{
	int x = 0;
	TCNT0 = 0; //Reset counter
	x = 0;
	while (x <= 32) //TCNT to 4530
  c4:	c9 f7       	brne	.-14     	; 0xb8 <__vector_14+0x18>
	{
		while(TCNT0 != 137){} // Delay for 0.29 seconds
		TCNT0 = 0; // Reset Counter
		x++; // Over flow counter
	} //Delay to keep LED off
	PORTB ^= (1<<2); //LED turns on
  c6:	95 b1       	in	r25, 0x05	; 5
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	89 27       	eor	r24, r25
  cc:	85 b9       	out	0x05, r24	; 5
	TCNT0 = 0; //Reset counter
  ce:	16 bc       	out	0x26, r1	; 38
  d0:	21 e2       	ldi	r18, 0x21	; 33
  d2:	30 e0       	ldi	r19, 0x00	; 0
	x = 0;
	while (x <= 32) //TCNT to 6796
	{
		while(TCNT0 != 206){} // Delay for 0.435 seconds
  d4:	86 b5       	in	r24, 0x26	; 38
  d6:	8e 3c       	cpi	r24, 0xCE	; 206
  d8:	e9 f7       	brne	.-6      	; 0xd4 <__vector_14+0x34>
		TCNT0 = 0; // Reset counter
  da:	16 bc       	out	0x26, r1	; 38
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	31 09       	sbc	r19, r1
		x++; // Over flow counter
	} //Delay to keep LED off
	PORTB ^= (1<<2); //LED turns on
	TCNT0 = 0; //Reset counter
	x = 0;
	while (x <= 32) //TCNT to 6796
  e0:	c9 f7       	brne	.-14     	; 0xd4 <__vector_14+0x34>
	{
		while(TCNT0 != 206){} // Delay for 0.435 seconds
		TCNT0 = 0; // Reset counter
		x++; // Over flow counter
	} //Delay to keep LED on
	PORTB ^= (1<<2); //LED turns off
  e2:	95 b1       	in	r25, 0x05	; 5
  e4:	84 e0       	ldi	r24, 0x04	; 4
  e6:	89 27       	eor	r24, r25
  e8:	85 b9       	out	0x05, r24	; 5
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	3f 91       	pop	r19
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
